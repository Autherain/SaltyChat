services:
  nats:
    container_name: nats
    image: nats:2.10-alpine
    command:
      - "-DVV"
      - "--config"
      - "/etc/nats-config/nats.conf"
    ports:
      - 4222:4222
      - 8222:8222
    volumes:
      - ./services/nats/nats.conf:/etc/nats-config/nats.conf:ro
      - ./var/data/jetstream/:/data/jetstream/
      - /var/run/nats/

  traefik:
    image: traefik:v2.10
    container_name: traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      # Enable self-signed certificates for local development
      - "--certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
    ports:
      - "80:80"
      - "443:443"
      - "8081:8080" # Dashboard port
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.tls=true"

  gateway:
    image: resgateio/resgate
    platform: linux/amd64
    command:
      - --config=/etc/config.json
      - --debug
      - --nats=nats://nats:4222
      - --DV
    ports:
      - 8880:8080
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.gateway.entrypoints=websecure"
      - "traefik.http.routers.gateway.rule=Host(`svc.localhost`)"
      - "traefik.http.routers.gateway.tls=true"
      - "traefik.http.services.gateway.loadbalancer.server.port=8080"
      - "traefik.http.middlewares.gateway.headers.accessControlExposeHeaders=Location"
      - "traefik.http.routers.gateway.middlewares=gateway"
      - "traefik.http.middlewares.gateway.headers.accesscontrolallowmethods=GET,OPTIONS,PUT"
      - "traefik.http.middlewares.gateway.headers.accesscontrolallowheaders=*"
    volumes:
      - ./services/gateway/gateway.json:/etc/config.json:ro
    depends_on:
      - nats
      - traefik

  api.db:
    image: postgres:13-alpine
    container_name: db
    environment:
      POSTGRES_DB: api
      POSTGRES_PASSWORD: api
      POSTGRES_USER: api
    healthcheck:
      interval: 5s
      test:
        - CMD-SHELL
        - pg_isready
        - -d
        - api
    ports:
      - 5432:5432
    restart: on-failure
    volumes:
      - ./services/api/test/data/entities.sql:/var/lib/postgresql/test/data/entities.sql:ro
      - ./var/data/api/:/var/lib/postgresql/data/

  api.server:
    build:
      context: ./services/api
      dockerfile: build/server/dockerfile
    environment:
      APP_NATS_URL: nats://nats:4222
      APP_SERVICE_NAME: api.server
      APP_SERVICE_IN_CHANNEL_SIZE: 1024
      APP_SERVICE_WORKER_COUNT: 128
      APP_SHUTDOWN_TIMEOUT: 30s
      APP_HEALTH_ENABLED: true
      APP_LOG_FORMAT: json
      APP_LOG_LEVEL: debug
      APP_LOG_SOURCE: true
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.rule=Host(`api.localhost`)"
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.services.api.loadbalancer.server.port=3000"
    depends_on:
      - nats
      - gateway
      - traefik

  api.migrate:
    image: migrate/migrate
    working_dir: /migrations
    volumes:
      - ./services/api/migrations:/migrations
    depends_on:
      api.db:
        condition: service_healthy
    entrypoint:
      - "sh"
      - "-c"
      - "migrate -database=postgres://api:api@api.db:5432/api?sslmode=disable -path=/migrations/ up"
